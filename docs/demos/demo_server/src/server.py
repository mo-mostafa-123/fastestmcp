#!/usr/bin/env python3
"""
demo_server/src/server.py - Clean MCP Server (Tools: 3, Resources: 2, Prompts: 2)
Generated by FastestMCP CLI
"""

import sys
import os
from mcp.server.fastmcp import FastMCP

# Add components to path
sys.path.insert(0, os.path.dirname(__file__))

# Dynamic imports from components
def load_components():
    """Load all component modules dynamically"""
    components = {}

    # Load tools
    if 3 > 0:
        try:
            from components import tools
            components['tools'] = tools
        except ImportError:
            pass

    # Load resources
    if 2 > 0:
        try:
            from components import resources
            components['resources'] = resources
        except ImportError:
            pass

    # Load prompts
    if 2 > 0:
        try:
            from components import prompts
            components['prompts'] = prompts
        except ImportError:
            pass

    # Load notifications
    if 1 > 0:
        try:
            from components import notifications
            components['notifications'] = notifications
        except ImportError:
            pass

    # Load subscriptions
    if 1 > 0:
        try:
            from components import subscriptions
            components['subscriptions'] = subscriptions
        except ImportError:
            pass

    return components

# Load components
components = load_components()

# Create MCP server
app = FastMCP("demo_server MCP Server")

# Register components
if 'tools' in components:
    components['tools'].register_tools(app)

if 'resources' in components:
    components['resources'].register_resources(app)

if 'prompts' in components:
    components['prompts'].register_prompts(app)

if 'notifications' in components:
    components['notifications'].register_notifications(app)

if 'subscriptions' in components:
    components['subscriptions'].register_subscriptions(app)

if __name__ == "__main__":
    import asyncio
    asyncio.run(app.run_stdio_async())
