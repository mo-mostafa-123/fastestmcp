#!/usr/bin/env python3
"""
test - Stdio MCP Server (Tools: 2, Resources: 2, Prompts: 1, Notifications: 0, Subscriptions: 0)
Generated by FastestMCP CLI
"""

from mcp.server.fastmcp import FastMCP
from fastestmcp.components import register_component

# Create MCP server
app = FastMCP("test MCP Server")

# Tools - Using component system
def register_tools(server_app):
    """Register all tools with the server using component templates"""
    result = register_component("tools", "tool_template", server_app, count=2)
    if not result["success"]:
        print(f"Warning: Failed to register tools: {result.get('error', 'Unknown error')}")
    return result

# Resources - Using component system
def register_resources(server_app):
    """Register all resources with the server using component templates"""
    result = register_component("resources", "resource_template", server_app, count=2)
    if not result["success"]:
        print(f"Warning: Failed to register resources: {result.get('error', 'Unknown error')}")
    return result

# Prompts - Using component system
def register_prompts(server_app):
    """Register all prompts with the server using component templates"""
    result = register_component("prompts", "prompt_template", server_app, count=1)
    if not result["success"]:
        print(f"Warning: Failed to register prompts: {result.get('error', 'Unknown error')}")
    return result

# Register components
register_tools(app)
register_resources(app)
register_prompts(app)

if __name__ == "__main__":
    import asyncio
    asyncio.run(app.run_stdio_async())

# TODO: Customize server startup, logging, or component wiring for your environment
