"""
Tests for test MCP Server
Generated by FastestMCP CLI
"""

import pytest
import importlib.util
from unittest.mock import Mock, patch, AsyncMock

# Dynamic import for mono-file server
def load_server_module():
    """Load the server module dynamically to handle filenames with hyphens"""
    spec = importlib.util.spec_from_file_location("test", "test.py")
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module

server_module = load_server_module()
app = server_module.app
register_tools = server_module.register_tools
register_resources = server_module.register_resources
register_prompts = getattr(server_module, 'register_prompts', None)
register_notifications = getattr(server_module, 'register_notifications', None)
register_subscriptions = getattr(server_module, 'register_subscriptions', None)


class TestTestServer:
    """Test cases for the test MCP server"""

    def test_server_creation(self):
        """Test that the MCP server is created successfully"""
        assert app is not None
        assert hasattr(app, 'name')
        assert "test" in app.name

    def test_register_tools_function_exists(self):
        """Test that register_tools function exists"""
        assert callable(register_tools)

    def test_register_resources_function_exists(self):
        """Test that register_resources function exists"""
        assert callable(register_resources)

    @pytest.mark.asyncio
    async def test_server_can_start(self):
        """Test that the server can be started (mocked)"""
        with patch.object(app, 'run_stdio_async', new_callable=AsyncMock):
            # We can't actually run the server in tests, but we can verify the method exists
            assert hasattr(app, 'run_stdio_async')
            assert callable(app.run_stdio_async)

    def test_tools_registration(self):
        """Test tools registration with mocked server"""
        mock_server = Mock()
        result = register_tools(mock_server)
        assert result["success"]
        assert result["count"] == 2
        assert "tools" in result["component_type"]

    def test_resources_registration(self):
        """Test resources registration with mocked server"""
        mock_server = Mock()
        result = register_resources(mock_server)
        assert result["success"]
        assert result["count"] == 2
        assert "resources" in result["component_type"]

    def test_prompts_registration(self):
        """Test prompts registration with mocked server"""
        mock_server = Mock()
        result = register_prompts(mock_server)
        assert result["success"]
        assert result["count"] == 2  # Fixed undefined variable
        assert "prompts" in result["component_type"]


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
