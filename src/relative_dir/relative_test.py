#!/usr/bin/env python3
"""
relative_test - Stdio MCP Server (Tools: 2, Resources: 1, Prompts: 0)
Generated by FastestMCP CLI
"""

from mcp.server.fastmcp import FastMCP

# Create MCP server
app = FastMCP(f"relative_test MCP Server")

# Tools
def register_tools(server_app):
    """Register all tools with the server"""
    server_app.add_tool(tool_1)
    server_app.add_tool(tool_2)


def tool_1(input_data: str) -> str:
    """Tool 1 - handles input processing"""
    # TODO: Implement tool 1 logic
    return f'Tool 1 processed: {input_data}'

def tool_2(input_data: str) -> str:
    """Tool 2 - handles input processing"""
    # TODO: Implement tool 2 logic
    return f'Tool 2 processed: {input_data}'

# Resources
from mcp.types import Resource
from pydantic import AnyUrl

def register_resources(server_app):
    """Register all resources with the server"""
    resource_1 = Resource(
        uri=AnyUrl("resource://resource_1"),
        name="Resource 1",
        description="Resource 1 data",
        mimeType="application/json"
    )
    server_app.add_resource(resource_1)


def get_resource_1():
    """Get resource 1 data"""
    # TODO: Implement resource 1 data retrieval
    return {"resource": 1, "data": "placeholder"}

# Register components
register_tools(app)
register_resources(app)

if __name__ == "__main__":
    import asyncio
    asyncio.run(app.run_stdio_async())
